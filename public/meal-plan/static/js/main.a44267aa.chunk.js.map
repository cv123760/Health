{"version":3,"sources":["components/Items.js","components/FoodGroup.js","components/week.js","components/PlateItem.js","components/mealTimes.js","components/Day.js","components/ShoppingListItem.js","components/ShoppingList.js","App.jsx","index.js"],"names":["Items","props","list","useState","visible","toggleVisible","done","className","style","display","map","item","index","onClick","event","preventDefault","addToPlan","group","removeFromFoods","placeholder","onKeyDown","keyCode","target","value","addToFoods","prev","ListFoodGroups","toggle","console","log","week","PlateItem","indexNum","Value","updateItem","Meals","Day","initPos","dayIndex","day","mealTimes","meal","Object","keys","Data","ShoppingListItem","line","hide","hideCompleted","color","textDecoration","unit","total","ShoppingList","listName","quantities","forEach","getQuatities","Serving","setPServ","num","oz","lb","Math","floor","name","type","min","max","onChange","serv","url","tomorrow","Date","getDay","App","setError","setIsLoaded","string","setData","useEffect","fetch","then","res","json","result","error","Foods","Protein","Carb","Veggie","newDay","filter","element","newArray","newItem","newIndex","daysOfTheWeek","updateDays","length","FoodGroups","toggleHide","showAll","href","src","alt","FoodGroup","action","method","id","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a44267aa.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\nconst Items = props=>{\n\n    const list = props.list\n\n    // edit options\n    const [visible, toggleVisible] = useState(true)\n\n    const done = visible? \"Edit\": \"Done\"\n\n\n\n\n\n    \n    return <div className = \"box foodGroup\"\n        style = {{display: props.visible? \"flex\": \"none\"}}\n    >\n        {list.map((item, index)=>{\n\n            return <div \n                key = {index}\n                className = \"itemDiv\">\n                 <button\n                style={{display: visible? \"inline\": \"none\"}}\n                className = \"item\"\n                key = {item}\n                onClick = {event=>{\n                    event.preventDefault()\n                    props.addToPlan(item, props.group, list)\n                }}\n                >{item}</button>\n\n                <button\n                    style={{display: visible? \"none\":\"inline\"}}\n                    className = \"item\"\n                    onClick = {event=>{\n                        event.preventDefault()\n                        props.removeFromFoods(item, props.group)\n\n                    }}\n                >DELETE {item}</button>\n                \n            </div>\n        })}\n        <div className = \"editFoodGroup\">\n\n            <input \n                style={{display: visible? \"none\":\"inline\"}}\n                className = \"edit\"\n                placeholder = \"Add an Item\"\n                onKeyDown = {event=>{\n                    if (event.keyCode === 13){\n                        let item = event.target.value\n                        props.addToFoods(item, props.group)\n                        event.target.value = \"\"\n\n                    }                   \n                }}\n            \n            />\n\n            \n\n            <button\n                className = \"done\"\n                onClick = {event=>{\n                    event.preventDefault()\n                    toggleVisible(prev=>!prev)\n\n                }}\n            >{done}</button>\n\n        </div>\n\n    </div>\n}\n\nexport default Items\n","import React, { useState } from 'react';\nimport Items from \"./Items\"\n\nconst ListFoodGroups = props=>{\n    const [visible, toggle] = useState( true ) \n\n    return <div>\n        <h1\n        onClick = {event=>{\n            event.preventDefault()\n            toggle(prev=>!prev)\n            console.log(visible)\n        }}\n        >{props.group}</h1>\n\n        <Items \n        visible = {visible}\n        list = {props.list} // foodgroup array\n        addToPlan = {props.addToPlan}\n        group = {props.group}\n        addToFoods = {props.addToFoods}\n        removeFromFoods = {props.removeFromFoods}\n        />\n    </div>\n\n\n}\n\nexport default ListFoodGroups","const week = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n]\n\nexport default week","const PlateItem = props =>{\n\n    if (props.list[props.indexNum]){\n        return <input Value = {props.list[props.indexNum]} \n        onKeyDown = {event =>{\n            if (event.keyCode === 13 ){\n                props.updateItem (event.target.value,props.indexNum, props.group)\n            }\n            }}\n        />\n    } else {return null}\n\n}\n\nexport default PlateItem","const Meals = [\n    \"Breakfast\",\n    \"Lunch\",\n    \"Diner\"\n]\n\nexport default Meals","import React from 'react';\nimport PlateItem from './PlateItem';\nimport mealTimes from \"./mealTimes\"\n\n\nconst Day = props=>{\n\n    // keek track of position in array from Data object\n    let initPos = 3*props.dayIndex\n\n\n\n\n    return <div className = \"box\">\n\n        <h2>{props.day}</h2>\n        <div className = \"day\">\n        {mealTimes.map((meal, index)=>{\n            \n            let indexNum = initPos+index \n\n            return <div className = \"meal\" key = {indexNum}>\n                <h3>{meal}</h3>\n\n                \n                \n                {Object.keys(props.Data).map(group=>{\n\n                    if (group !== \"Foods\"){\n                        return <PlateItem \n                        indexNum = {indexNum}\n                        group = {group}\n                        list = {props.Data.[group]}\n                        updateItem = {props.updateItem}\n                        />\n                    } else {return null}\n\n\n                })}\n                \n            </div>\n            \n        })}\n            \n        </div>\n\n\n\n\n    </div>\n}\nexport default Day\n\n","import React,{useState} from 'react';\n\nconst ShoppingListItem =props=>{\n    const [line, toggle] = useState (false)\n    let hide = false\n    if(line){hide = props.hideCompleted}\n\n\n    return <p \n    onClick={event=>{\n        event.preventDefault()\n        toggle(prev=>!prev)\n    }}\n    \n    style = {\n        {color: line?\"#29C7AC\":\"white\",\n        textDecoration:line?\"line-through\":\"none\",\n        display: hide?\"none\":\"block\"}\n    }\n    key = {props.index}>{props.unit(props.total)+\" \"+props.item}</p>\n}\n\nexport default ShoppingListItem","import React,{useState} from 'react';\nimport ShoppingListItem from \"./ShoppingListItem\"\n\nconst ShoppingList = props => {\n    let list = props.Data.[props.list]\n    const listName = props.list\n\n    if(props.list === \"Foods\"){list = []}\n\n\n    // render shopping list\n    const quantities = {}\n    \n    \n    const getQuatities = list=>{\n        if (list){\n            list.forEach(item=>{\n                if (quantities.[item]){quantities.[item]++}\n                else{quantities.[item]= 1} \n            })\n        }\n\n    }\n\n    \n    getQuatities(props.Data.[props.list])\n\n\n    const ShoppingList = Object.keys(quantities)\n\n    // serving sizes \n    const [Serving, setPServ] = useState(6)\n\n    const unit =num =>{\n        let oz = num%16\n        let lb = Math.floor(num/16)\n\n        if (lb>0){\n            return lb + \" lbs \" + oz + \" oz \"\n        } else {return oz + \" oz \"}\n    }\n\n\n    return <div>\n        <h3>{listName}</h3>\n        <div className = \"serving\">\n\n            <div className = \"slider\">\n                {/* adjust protein serving */}\n\n                <p>serving size {Serving} oz</p>\n\n                <input \n                name = \"protein\"\n                type = \"range\"\n                min = \"0\"\n                max = \"12\"\n                onChange={event=>{\n                    setPServ(event.target.value)\n                }}\n                />\n\n                {/* <button\n                className = \"edit\"\n                onClick={event=>{\n                    event.preventDefault()\n                    if (proteinServing>0){\n                        setPServ(prev=>prev--)\n                    }\n                }}\n                >-</button>\n\n\n                <button\n                className = \"edit\"\n                onClick={event=>{\n                    event.preventDefault()\n                    if (proteinServing<=11){\n                        setPServ(prev=>prev+1)\n                    }\n                }}\n                >+</button> */}\n            </div>\n\n            \n\n\n           \n\n\n        </div>\n\n        <div>\n            {ShoppingList.map((item, index)=>{\n\n                // establish serving size for element\n                let serv = Serving\n\n                let total = quantities.[item]*serv\n\n                return <ShoppingListItem \n                    hideCompleted = {props.hideCompleted}\n                    index = {index}\n                    unit = {unit}\n                    total = {total}\n                    item = {item}\n                    key = {index}\n                />\n            })}\n\n        </div>\n\n\n\n\n    </div>\n}\n\nexport default ShoppingList","import React,{useState,useEffect} from 'react';\nimport FoodGroup from \"./components/FoodGroup\"\nimport week from \"./components/week\"\nimport Day from \"./components/Day\"\nimport ShopppingList from \"./components/ShoppingList\"\nimport string from \"./components/data.json\"\n\n\n\nconst url = \"https://floating-hamlet-55199.herokuapp.com/getFoods\"\n// const url = \"https://floating-hamlet-55199.herokuapp.com/getFoods/getFoods\"\nconst date = new Date()\n\n// set up date\nlet tomorrow = date.getDay()+1\nlet day = tomorrow\n\n// ensure that number tomorrow is an index \n// in week array\nif(!week[tomorrow]){tomorrow = 0}\n\n\n\n\nconst App = ()=>{\n\n    let max = 0\n    // retrive saved Data from database\n\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [Data, setData] = useState(string);\n    \n    // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n    useEffect(() => {\n        fetch(url)\n        .then(res => res.json())\n        .then(\n            (result) => {\n            setIsLoaded(true);\n            setData(result);\n            console.log(result)\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n            setIsLoaded(true);\n            setError(error);\n            }\n        )\n    }, [])\n\n\n    // modify Data\n    \n\n    const addToPlan = (item, group)=>{\n        setData(prev=>{\n\n            if (group === \"Protein\"){\n                return{\n                    Foods: prev.Foods,\n                    Protein: [...prev.Protein, item],\n                    Carb: prev.Carb,\n                    Veggie: prev.Veggie\n                }\n            } else if (group === \"Carb\"){\n\n                return{\n                    Foods: prev.Foods,\n                    Protein: prev.Protein,\n                    Carb: [...prev.Carb, item],\n                    Veggie: prev.Veggie\n                }\n            } else if (group === \"Veggie\"){\n\n                return{\n                    Foods: prev.Foods,\n                    Protein: prev.Protein,\n                    Carb: prev.Carb,\n                    Veggie: [...prev.Veggie, item]\n                }\n            }\n        })\n        newDay()\n    }\n\n\n    const addToFoods = (item, group)=>{\n\n        setData(prev=>{\n\n            if (group === \"Protein\"){\n                return{\n                    Foods: {\n                        Protein: [...prev.Foods.[group], item],\n                        Carb: prev.Foods.Carb,\n                        Veggie: prev.Foods.Veggie\n                    },\n                    Protein: prev.Protein,\n                    Carb: prev.Carb,\n                    Veggie: prev.Veggie\n                }\n            } else if (group === \"Carb\"){\n\n                return{\n                    Foods: {\n                        Protein: prev.Foods.Protein,\n                        Carb: [...prev.Foods.[group], item],\n                        Veggie: prev.Foods.Veggie\n                    },                    \n                    Protein: prev.Protein,\n                    Carb: prev.Carb,\n                    Veggie: prev.Veggie\n                }\n            } else if (group === \"Veggie\"){\n\n                return{\n                    Foods: {\n                        Protein: prev.Foods.Protein,\n                        Carb: prev.Foods.Carb,\n                        Veggie: [...prev.Foods.[group], item]\n                    },                    \n                    Protein: prev.Protein,\n                    Carb: prev.Carb,\n                    Veggie: prev.Veggie\n                }\n            }\n        })\n\n    }\n\n    const removeFromFoods = (item, group)=>{\n\n\n        setData(prev=>{\n\n\n            if (group === \"Protein\"){\n                return{\n                    Foods: {\n                        Protein: prev.Foods.[group].filter(element => element!==item),\n                        Carb: prev.Foods.Carb,\n                        Veggie: prev.Foods.Veggie\n                    },\n                    Protein: prev.Protein,\n                    Carb: prev.Carb,\n                    Veggie: prev.Veggie\n                }\n            } else if (group === \"Carb\"){\n\n                return{\n                    Foods: {\n                        Protein: prev.Foods.Protein,\n                        Carb: prev.Foods.[group].filter(element => element!==item),\n                        Veggie: prev.Foods.Veggie\n                    },                    \n                    Protein: prev.Protein,\n                    Carb: prev.Carb,\n                    Veggie: prev.Veggie\n                }\n            } else if (group === \"Veggie\"){\n\n                return{\n                    Foods: {\n                        Protein: prev.Foods.Protein,\n                        Carb: prev.Foods.Carb,\n                        Veggie: prev.Foods.[group].filter(element => element!==item)\n                    },                    \n                    Protein: prev.Protein,\n                    Carb: prev.Carb,\n                    Veggie: prev.Veggie\n                }\n            }\n        })\n\n\n    }\n\n    const startOver = ()=>{\n        setData(prev=>{\n            return{\n                Foods: prev.Foods,                \n                Protein: [],\n                Carb: [],\n                Veggie: []\n            }\n        })\n        updateDays([week[tomorrow]])\n    }\n\n    const updateItem = (item, index, group )=>{\n        console.log (item, \"item\")\n        console.log(index, \"index\")\n        console.log(group, \"group\")\n\n        setData(prev=>{\n            const newArray = prev.[group].map((newItem, newIndex)=>{\n                if (newIndex === index){\n                    return item\n                }\n                return newItem\n            })\n            console.log(newArray)\n            if (group === \"Protein\"){\n                \n\n                return{\n                    Foods: prev.Foods,\n                    Protein: newArray,\n                    Carb: prev.Carb,\n                    Veggie: prev.Veggie\n                }\n            } else if (group === \"Carb\"){\n\n                return{\n                    Foods: prev.Foods,\n                    Protein: prev.Protein,\n                    Carb: newArray,\n                    Veggie: prev.Veggie\n                }\n            } else if (group === \"Veggie\"){\n\n                return{\n                    Foods: prev.Foods,\n                    Protein: prev.Protein,\n                    Carb: prev.Carb,\n                    Veggie: newArray\n                }\n            }\n        })\n    }\n    \n    const [daysOfTheWeek, updateDays] = useState([])\n    \n\n\n    const newDay = ()=>{\n        // determine the longest list length\n        max = Math.max(\n            Data.Protein.length,\n            Data.Carb.length,\n            Data.Veggie.length\n        )\n        // if (max === 0){\n        //     updateDays([week[day]])\n        // } else if(daysOfTheWeek.length === 0){\n        // }\n\n\n\n        if (max/daysOfTheWeek.length>3){\n            \n            day++\n            if(!week[day]){day = 0}\n            updateDays(prev=>{\n                return [...prev, week[day]]\n            })\n        }\n    }\n\n    let FoodGroups = []\n    if (Data.Foods){\n        FoodGroups = Object.keys(Data.Foods)\n        newDay()\n    }\n\n\n\n    // Soppinglist \n    const [hideCompleted, toggleHide] = useState(false)\n    let showAll = \"Hide Complete\"\n    if (hideCompleted){showAll = \"Show All\"}\n\n\n\n\n\n\n\n\n    return <div>\n\n        <header className = \"box\">\n            <a href= \"/\"> <img src=\"/images/log-green.svg\" alt=\"\" /> </a>\n            <nav>\n                <a href= \"/meal-plan\"> Meal Plan  </a>\n                <a href= \"/strength\"> Strength </a>\n                <a href= \"/cardio\"> Cardio </a>\n            </nav>\n            <div>\n                <img src=\"https://lh3.googleusercontent.com/a/AATXAJwsRaE2gU2HRUZH_0r95dt-5dtdcaxFPnrCy1VI=s96-c\" alt=\"\" />\n                <a href= \"/logout\"> Log Out </a>\n            </div>\n\n        </header>\n\n        <div className=\"body\">\n            {/* list food items */}\n            <div className = \"foodsList\">\n\n\n                {FoodGroups.map(group =>{\n                    return <FoodGroup \n                        key = {group}\n                        group = {group} \n                        list = {Data.Foods.[group]}\n                        addToPlan = {addToPlan}\n                        addToFoods = {addToFoods}\n                        removeFromFoods = {removeFromFoods}\n                        />\n                    })   \n                }\n\n<div className = \"shoopingList\">\n                <h1>Shopping List</h1>\n\n                <div className =\"day\">\n\n                    {Object.keys(Data).map(list=>{\n                        if (list === \"Foods\"){return null}\n                        return <ShopppingList \n                        hideCompleted = {hideCompleted}\n                        list =  {list}\n                        Data = {Data}\n                        key = {list}\n                        \n                        \n                        />\n                        \n                    })}\n\n\n                </div>\n\n                <button \n                    className = \"edit\"\n                    onClick = {event=>{\n                        toggleHide(prev=>!prev)\n                    }}\n                >{showAll}</button>\n              \n                \n            </div>\n            </div>\n\n            {/* Meal Plan */}\n            <div className= \"mealPlan\">\n                <h1>Meal Plan</h1>\n                \n\n                {daysOfTheWeek.map((day, dayIndex)=>{\n\n                    return <Day \n                    day = {day}\n                    FoodGroups = {FoodGroups}\n                    Data = {Data}\n                    dayIndex = {dayIndex}\n                    key = {dayIndex}\n                    updateItem = {updateItem}\n                    \n                    />\n                }\n                )}\n\n                <form action={url} method = \"post\">\n                    <input \n                    style = {{display:\"none\"}}\n                    type=\"text\" \n                    id = \"saveData\" \n                    name = \"data\" \n                    onChange = {event=>{\n                        event.preventDefault()\n                    }}\n                \n                    \n                    value = {JSON.stringify (Data)}\n                    />\n\n                    <button className = \"done\"\n                        onClick = {event=>{\n                        }}\n                    >save</button>\n\n\n\n\n                    <button className = \"edit\"\n                        onClick = {event=>{\n                            event.preventDefault()\n                            startOver()\n                        }}\n                    >Start Over</button>\n\n                </form>\n                \n                \n\n\n                \n\n            </div>\n\n\n        </div>\n        <input className = \"feedBack\" type=\"text\" placeholder = \"Feedback\" />\n        \n\n    </div>\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}