{"version":3,"sources":["components/ShoppingListItem.js","components/ShoppingList.js","components/Items.js","components/FoodGroup.js","components/week.js","components/mealTimes.js","components/Plate.js","components/Meals.js","components/Day.js","components/MealPlan.js","App.jsx","index.js"],"names":["ShoppingListItem","props","useState","line","toggle","hide","hideCompleted","className","onClick","event","preventDefault","prev","style","color","textDecoration","display","marginRight","unit","total","item","index","ShoppingList","mealPlan","FoodGroup","quantities","forEach","Object","keys","intialServing","serving","setServ","num","oz","lb","Math","floor","map","serv","Items","list","visible","toggleVisible","done","addToPlan","group","removeFromFoods","placeholder","onKeyDown","keyCode","target","value","addToFoods","ListFoodGroups","week","Meals","Plate","lists","weekIndex","mealIndex","contentEditable","suppressContentEditableWarning","innerHTML","updateItem","indexNum","mealTimes","meal","Day","daynum","Date","date","getDay","foodGroups","days","longest","longestList","length","push","weekDay","MealPlan","Data","startDate","id","type","onChange","newDate","valueAsDate","changeStartDate","url","App","setError","setIsLoaded","string","setData","useEffect","fetch","then","res","json","result","console","log","error","Foods","Protein","Carb","Veggie","filter","element","FoodGroups","toggleHide","showAll","href","src","alt","slice","newArray","newItem","newIndex","action","method","name","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAwBeA,EAtBS,SAAAC,GACpB,MAAuBC,oBAAU,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACIC,GAAO,EAIX,OAHGF,IAAME,EAAOJ,EAAMK,eAGf,mBACPC,UAAY,mBACZC,QAAS,SAAAC,GACLA,EAAMC,iBACNN,GAAO,SAAAO,GAAI,OAAGA,MAGlBC,MACI,CAACC,MAAOV,EAAK,UAAU,QACvBW,eAAeX,EAAK,eAAe,OACnCY,QAASV,EAAK,OAAO,QACrBW,YAAa,QAXV,SAacf,EAAMgB,KAAKhB,EAAMiB,OAAO,IAAIjB,EAAMkB,MAAhDlB,EAAMmB,QC8EFC,EAhGM,SAAApB,GACDA,EAAMqB,SAAUrB,EAAMsB,WAAtC,IAGMC,EAAa,GAcNvB,EAAMqB,SAAUrB,EAAMsB,WAT1BE,SAAQ,SAAAN,GACLK,EAAYL,GAAOK,EAAYL,KAC9BK,EAAYL,GAAO,KAUhC,IAAME,EAAeK,OAAOC,KAAKH,GAG7BI,EAAgB,EACI,YAApB3B,EAAMsB,YAAyBK,EAAe,GAGlD,MAA2B1B,mBAAS0B,GAApC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMb,EAAM,SAAAc,GACR,IAAIC,EAAKD,EAAI,GACTE,EAAKC,KAAKC,MAAMJ,EAAI,IAExB,OAAIE,EAAG,EACIA,EAAK,QAAUD,EAAK,OAChBA,EAAK,QAIxB,OAAO,gCACH,6BAAK/B,EAAMsB,YAEX,sBAAKhB,UAAY,UAAjB,UAGI,mBACAA,UAAY,cACZC,QAAS,SAAAC,GACLA,EAAMC,iBACFmB,EAAQ,GACRC,GAAQ,SAAAnB,GAAI,OAAEA,EAAK,MAL3B,eAUA,oBAAGJ,UAAY,cAAf,0BAA2CsB,EAA3C,SAEA,mBACAtB,UAAY,cACZC,QAAS,SAAAC,GACLA,EAAMC,iBACFmB,GAAS,IACTC,GAAQ,SAAAnB,GAAI,OAAEA,EAAK,MAL3B,kBAYJ,qBAAKJ,UAAY,aAAjB,SACKc,EAAae,KAAI,SAACjB,EAAMC,GAGrB,IAAIiB,EAAOR,EAEPX,EAAQM,EAAYL,GAAMkB,EAE9B,OAAO,cAAC,EAAD,CACH/B,cAAiBL,EAAMK,cACvBc,MAASA,EACTH,KAAQA,EACRC,MAASA,EACTC,KAAQA,GACDC,Y,OCXZkB,EA1ED,SAAArC,GAEV,IAAMsC,EAAOtC,EAAMsC,KAGnB,EAAiCrC,oBAAS,GAA1C,mBAAOsC,EAAP,KAAgBC,EAAhB,KAEMC,EAAOF,EAAS,OAAQ,OAO9B,OAAO,sBAAKjC,UAAY,aACxBK,MAAO,CAACG,QAASd,EAAMuC,QAAS,QAAS,QADlC,UAIFD,EAAKH,KAAI,SAACjB,EAAMC,GAEb,OAAO,gCACH,mBACIR,MAAO,CAACG,QAASyB,EAAS,QAAS,QAEnChC,QAAW,SAAAC,GACPR,EAAM0C,UAAUxB,EAAMlB,EAAM2C,MAAOL,IAJ3C,SAMMpB,GAJKA,GAOX,oBACIP,MAAO,CAACG,QAASyB,EAAS,OAAO,SACjChC,QAAW,SAAAC,GACPA,EAAMC,iBACNT,EAAM4C,gBAAgB1B,EAAMlB,EAAM2C,QAJ1C,oBAOSzB,OAjBMC,MAqBvB,sBAAKb,UAAY,gBAAjB,UAEI,uBACIK,MAAO,CAACG,QAASyB,EAAS,OAAO,UACjCjC,UAAY,OACZuC,YAAc,cACdC,UAAa,SAAAtC,GACT,GAAsB,KAAlBA,EAAMuC,QAAe,CACrB,IAAI7B,EAAOV,EAAMwC,OAAOC,MACxBjD,EAAMkD,WAAWhC,EAAMlB,EAAM2C,OAC7BnC,EAAMwC,OAAOC,MAAQ,OASjC,wBACI3C,UAAY,OACZC,QAAW,SAAAC,GACPA,EAAMC,iBACN+B,GAAc,SAAA9B,GAAI,OAAGA,MAJ7B,SAOE+B,WC1CCU,EAxBQ,SAAAnD,GACnB,MAA0BC,oBAAU,GAApC,mBAAOsC,EAAP,KAAgBpC,EAAhB,KAEA,OAAO,gCACH,oBACAI,QAAW,SAAAC,GACPA,EAAMC,iBACNN,GAAO,SAAAO,GAAI,OAAGA,MAHlB,SAKEV,EAAM2C,QAER,cAAC,EAAD,CACAJ,QAAWA,EACXD,KAAQtC,EAAMsC,KACdI,UAAa1C,EAAM0C,UACnBC,MAAS3C,EAAM2C,MACfO,WAAclD,EAAMkD,WACpBN,gBAAmB5C,EAAM4C,sBCVlBQ,EAVF,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YCDWC,EAND,CACV,YACA,QACA,SCsBWC,EAvBD,SAAAtD,GACV,IAAMuD,EAAQ9B,OAAOC,KAAK1B,EAAMqB,UAGhC,OAAO,8BACFkC,EAAMpB,KAAI,SAAAG,GACP,IAAMnB,EAAwB,EAAhBnB,EAAMwD,UAAcxD,EAAMyD,UACxC,OAAM,mBACNC,gBAAkB,OAClBC,gCAAgC,EAEhCb,UAAa,SAAAtC,GACT,GAAsB,KAAlBA,EAAMuC,QAAgB,CACtBvC,EAAMC,iBACN,IAAIS,EAAOV,EAAMwC,OAAOY,UACxB5D,EAAM6D,WAAY3C,EAAMC,EAAOmB,KARjC,SAWAtC,EAAMqB,SAAUiB,GAAOnB,IARvBnB,EAAM8D,gBCeTT,EAvBD,SAAArD,GACV,OAAO,qBAAKM,UAAY,MAAjB,SACFyD,EAAU5B,KAAI,SAAC6B,EAAMP,GAEtB,OAAO,gCAEH,6BAAKO,IACL,cAAC,EAAD,CACA3C,SAAYrB,EAAMqB,SAClBmC,UAAaxD,EAAMwD,UACnBC,UAAaA,EACbI,WAAc7D,EAAM6D,sBC6DjBI,EAxDH,SAAAjE,GACR,IAGIkE,EAHO,IAAIC,KAAKnE,EAAMoE,MAGRC,SACdjB,EAAKc,KAASA,EAAS,GAG3B,IAAMI,EAAa7C,OAAOC,KAAK1B,EAAMqB,UAC/BkD,EAAO,GAGTC,EAAU,EACVC,EAAc,UAsBlB,OArBAH,EAAW9C,SAAQ,SAAAc,GACXtC,EAAMqB,SAAUiB,GAAMoC,OAAOF,IAC7BA,EAAUxE,EAAMqB,SAAUiB,GAAMoC,OAChCD,EAAcnC,MAOtBtC,EAAMqB,SAAUoD,GAAajD,SAAQ,SAACyB,EAAM9B,GAGpCA,EAAM,IAAM,IACZ+C,IACId,EAAKc,KAASA,EAAS,GAE3BK,EAAKI,KAAKvB,EAAKc,QAIhB,8BACFK,EAAKpC,KAAI,SAACyC,EAASpB,GACpB,OAAO,gCACH,6BAAKoB,IAEJ,cAAC,EAAD,CACDvD,SAAYrB,EAAMqB,SAClBmC,UAAaA,EACbK,WAAc7D,EAAM6D,sBCnCjBgB,EAxBE,SAAA7E,GACb,IAAMoE,EAAOpE,EAAM8E,KAAKC,UAExB,OAAO,gCACH,2CAEA,2DACA,uBACAC,GAAK,OACLC,KAAO,OACPC,SAAY,SAAA1E,GACR,IAAI2E,EAAU3E,EAAMwC,OAAOoC,YAC3BpF,EAAMqF,gBAAgBF,MAI1B,cAAC,EAAD,CACA9D,SAAYrB,EAAM8E,KAAKzD,SACvBwC,WAAc7D,EAAM6D,WACpBO,KAAQA,QCjBVkB,EAAM,uDAoaGC,EA9ZH,WAIR,MAA0BtF,mBAAS,MAAnC,mBAAcuF,GAAd,WACA,EAAgCvF,oBAAS,GAAzC,mBAAiBwF,GAAjB,WACA,EAAwBxF,mBAASyF,GAAjC,mBAAOZ,EAAP,KAAaa,EAAb,KAKAC,qBAAU,WACNC,MAAMP,GACLQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACDR,GAAY,GACZE,EAAQM,GACRC,QAAQC,IAAIF,MAKZ,SAACG,GACDX,GAAY,GACZD,EAASY,QAGd,IAKH,IAAM1D,EAAY,SAACxB,EAAMyB,GACrBgD,GAAQ,SAAAjF,GAEJ,MAAc,YAAViC,EACM,CACF0D,MAAO3F,EAAK2F,MACZhF,SAAS,CACLiF,QAAQ,GAAD,mBAAM5F,EAAKW,SAASiF,SAApB,CAA6BpF,IACpCqF,KAAM7F,EAAKW,SAASkF,KACpBC,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,WAGF,SAAVpC,EAED,CACF0D,MAAO3F,EAAK2F,MACZhF,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAK,GAAD,mBAAM7F,EAAKW,SAASkF,MAApB,CAA0BrF,IAC9BsF,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,WAGF,WAAVpC,EAED,CACF0D,MAAO3F,EAAK2F,MACZhF,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAM7F,EAAKW,SAASkF,KACpBC,OAAO,GAAD,mBAAM9F,EAAKW,SAASmF,QAApB,CAA4BtF,KAEtC6D,UAAUrE,EAAKqE,gBAThB,MAiBT7B,EAAa,SAAChC,EAAMyB,GAEtBgD,GAAQ,SAAAjF,GAEJ,MAAc,YAAViC,EACM,CACF0D,MAAO,CACHC,QAAQ,GAAD,mBAAM5F,EAAK2F,MAAO1D,IAAlB,CAA0BzB,IACjCqF,KAAM7F,EAAK2F,MAAME,KACjBC,OAAQ9F,EAAK2F,MAAMG,QAEvBnF,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAM7F,EAAKW,SAASkF,KACpBC,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,WAGF,SAAVpC,EAED,CACF0D,MAAO,CACHC,QAAS5F,EAAK2F,MAAMC,QACpBC,KAAK,GAAD,mBAAM7F,EAAK2F,MAAO1D,IAAlB,CAA0BzB,IAC9BsF,OAAQ9F,EAAK2F,MAAMG,QAEvBnF,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAM7F,EAAKW,SAASkF,KACpBC,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,WAEF,WAAVpC,EAED,CACF0D,MAAO,CACHC,QAAS5F,EAAK2F,MAAMC,QACpBC,KAAM7F,EAAK2F,MAAME,KACjBC,OAAO,GAAD,mBAAM9F,EAAK2F,MAAO1D,IAAlB,CAA0BzB,KAEpCG,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAM7F,EAAKW,SAASkF,KACpBC,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,gBAbhB,MAoBTnC,EAAkB,SAAC1B,EAAMyB,GAG3BgD,GAAQ,SAAAjF,GAGJ,MAAc,YAAViC,EACM,CACF0D,MAAO,CACHC,QAAS5F,EAAK2F,MAAO1D,GAAO8D,QAAO,SAAAC,GAAO,OAAIA,IAAUxF,KACxDqF,KAAM7F,EAAK2F,MAAME,KACjBC,OAAQ9F,EAAK2F,MAAMG,QAEvBnF,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAM7F,EAAKW,SAASkF,KACpBC,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,WAEF,SAAVpC,EAED,CACF0D,MAAO,CACHC,QAAS5F,EAAK2F,MAAMC,QACpBC,KAAM7F,EAAK2F,MAAO1D,GAAO8D,QAAO,SAAAC,GAAO,OAAIA,IAAUxF,KACrDsF,OAAQ9F,EAAK2F,MAAMG,QAEvBnF,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAM7F,EAAKW,SAASkF,KACpBC,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,WAEF,WAAVpC,EAED,CACF0D,MAAO,CACHC,QAAS5F,EAAK2F,MAAMC,QACpBC,KAAM7F,EAAK2F,MAAME,KACjBC,OAAQ9F,EAAK2F,MAAO1D,GAAO8D,QAAO,SAAAC,GAAO,OAAIA,IAAUxF,MAE3DG,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAM7F,EAAKW,SAASkF,KACpBC,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,gBAbhB,MA8FTM,EAAkB,SAAAjB,GACpBuB,GAAQ,SAAAjF,GACJ,MAAO,CACH2F,MAAO3F,EAAK2F,MACZhF,SAASX,EAAKW,SACd0D,UAAUX,OAMjBU,EAAKC,WAAWM,EAAgB,IAAIlB,MAMzC,IAAIwC,EAAa,GACb7B,EAAKuB,QACLM,EAAalF,OAAOC,KAAKoD,EAAKuB,QAOlC,MAAoCpG,oBAAS,GAA7C,mBAAOI,EAAP,KAAsBuG,EAAtB,KACIC,EAAU,gBACVxG,IAAewG,EAAU,YAO7B,OAAO,gCAEH,mCACI,oBAAGC,KAAM,IAAT,cAAc,qBAAKC,IAAI,yBAAyBC,IAAI,SAApD,OACA,gCACI,mBAAGF,KAAM,aAAT,0BACA,mBAAGA,KAAM,YAAT,wBACA,mBAAGA,KAAM,UAAT,yBAEJ,qBAAKxG,UAAW,OAAhB,SACI,mBAAGwG,KAAM,UAAT,SACA,qBAAKC,IAAI,yFAAyFC,IAAI,YAM9G,sBAAK1G,UAAU,OAAf,UAEI,sBAAKA,UAAY,kBAAjB,UACI,gCACI,4CAEA,qBAAKA,UAAY,QAAjB,SACKqG,EAAWxE,KAAI,SAAAQ,GACZ,OAAO,cAAC,EAAD,CAEHA,MAASA,EACTL,KAAQwC,EAAKuB,MAAO1D,GACpBD,UAAaA,EACbQ,WAAcA,EACdN,gBAAmBA,GALZD,WAYvB,sBAAKrC,UAAY,eAAjB,UACI,+CAEA,gCACI,qBAAKA,UAAY,QAAjB,SACKmB,OAAOC,KAAKoD,EAAKzD,UAAUc,KAAI,SAAAb,GAC5B,OAAO,cAAC,EAAD,CACPjB,cAAiBA,EACjBiB,UAAcA,EACdD,SAAYyD,EAAKzD,UACVC,QAKf,wBACIhB,UAAY,OACZC,QAAW,SAAAC,GACPoG,GAAW,SAAAlG,GAAI,OAAGA,MAH1B,SAKMmG,aAOlB,sBAAKvG,UAAW,kBAAhB,UAEI,cAAC,EAAD,CACAwE,KAAQA,EACRjB,WAlKO,SAAC3C,EAAMC,EAAOwB,GAGP,WAAnBzB,EAAK+F,OAAO,KACXf,QAAQC,IAAIjF,EAAM,iBAElBA,EAAOA,EAAK+F,MAAM,GAAG,IAIzBtB,GAAQ,SAAAjF,GACJ,IAAMwG,EAAWxG,EAAKW,SAAUsB,GAAOR,KAAI,SAACgF,EAASC,GACjD,OAAIA,IAAajG,EACND,EAEJiG,KAEX,MAAc,YAAVxE,EAGM,CACF0D,MAAO3F,EAAK2F,MACZhF,SAAS,CACLiF,QAASY,EACTX,KAAM7F,EAAKW,SAASkF,KACpBC,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,WAGF,SAAVpC,EAED,CACF0D,MAAO3F,EAAK2F,MACZhF,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAMW,EACNV,OAAQ9F,EAAKW,SAASmF,QAE1BzB,UAAUrE,EAAKqE,WAGF,WAAVpC,EAED,CACF0D,MAAO3F,EAAK2F,MACZhF,SAAS,CACLiF,QAAS5F,EAAKW,SAASiF,QACvBC,KAAM7F,EAAKW,SAASkF,KACpBC,OAAQU,GAEZnC,UAAUrE,EAAKqE,gBAThB,MAyHHM,gBAAmBA,IAInB,uBAAMgC,OAAQ/B,EAAKgC,OAAS,OAA5B,UACI,uBACA3G,MAAS,CAACG,QAAQ,QAClBmE,KAAK,OACLD,GAAK,WACLuC,KAAO,OACPrC,SAAY,SAAA1E,GACRA,EAAMC,kBAIVwC,MAASuE,KAAKC,UAAW3C,KAGzB,wBAAQxE,UAAY,OAChBC,QAAW,SAAAC,KADf,kBAQA,wBAAQF,UAAY,OAChBC,QAAW,SAAAC,GACPA,EAAMC,iBA7M1BkF,GAAQ,SAAAjF,GACJ,MAAM,CACF2F,MAAO3F,EAAK2F,MACZhF,SAAS,CACLiF,QAAS,GACTC,KAAM,GACNC,OAAQ,IAEZzB,UAAUrE,EAAKqE,eAmMX,qCC3YpB2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.4851f2e6.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\nconst ShoppingListItem =props=>{\n    const [line, toggle] = useState (false)\n    let hide = false\n    if(line){hide = props.hideCompleted}\n\n\n    return <p \n    className = \"shoppingListItem\"\n    onClick={event=>{\n        event.preventDefault()\n        toggle(prev=>!prev)\n    }}\n    \n    style = {\n        {color: line?\"#29C7AC\":\"black\",\n        textDecoration:line?\"line-through\":\"none\",\n        display: hide?\"none\":\"block\",\n        marginRight: \"15px\"}\n    }\n    key = {props.index}>{props.unit(props.total)+\" \"+props.item}</p>\n}\n\nexport default ShoppingListItem","import React,{useState} from 'react';\nimport ShoppingListItem from \"./ShoppingListItem\"\n\nconst ShoppingList = props => {\n    let FoodGroup = props.mealPlan.[props.FoodGroup]\n\n    // render shopping list\n    const quantities = {}\n    \n    \n    const getQuatities = list=>{\n\n        list.forEach(item=>{\n            if (quantities.[item]){quantities.[item]++}\n            else{quantities.[item]= 1} \n        })\n        \n\n    }\n\n    \n    getQuatities(props.mealPlan.[props.FoodGroup])\n\n\n    const ShoppingList = Object.keys(quantities)\n\n    // serving sizes \n    let intialServing = 8\n    if (props.FoodGroup === \"Protein\"){intialServing= 6}\n\n\n    const [serving, setServ] = useState(intialServing)\n\n    const unit =num =>{\n        let oz = num%16\n        let lb = Math.floor(num/16)\n\n        if (lb>0){\n            return lb + \" lbs \" + oz + \" oz \"\n        } else {return oz + \" oz \"}\n    }\n\n\n    return <div>\n        <h2>{props.FoodGroup}</h2>\n\n        <div className = \"serving\">\n            \n            {/* adjust protein serving */}\n            <p\n            className = \"editServing\"\n            onClick={event=>{\n                event.preventDefault()\n                if (serving>0){\n                    setServ(prev=>prev-1)\n                }\n            }}\n            >-</p>\n            \n            <p className = \"servingSize\">serving size {serving} oz</p>\n\n            <p\n            className = \"editServing\"\n            onClick={event=>{\n                event.preventDefault()\n                if (serving<=30){\n                    setServ(prev=>prev+1)\n                }\n            }}\n            >+</p>\n\n        </div>\n\n        <div className = \"singleList\">\n            {ShoppingList.map((item, index)=>{\n\n                // establish serving size for element\n                let serv = serving\n\n                let total = quantities.[item]*serv\n\n                return <ShoppingListItem \n                    hideCompleted = {props.hideCompleted}\n                    index = {index}\n                    unit = {unit}\n                    total = {total}\n                    item = {item}\n                    key = {index}\n                />\n            })}\n\n        </div>\n\n\n\n\n    </div>\n}\n\nexport default ShoppingList","import React,{useState} from 'react';\n\nconst Items = props=>{\n\n    const list = props.list\n\n    // edit options\n    const [visible, toggleVisible] = useState(true)\n\n    const done = visible? \"Edit\": \"Done\"\n\n\n\n\n\n    \n    return <div className = \"singleList\"\n    style={{display: props.visible? \"block\": \"none\"}}\n    // style = {{display: props.visible? \"inline\": \"none\"}}\n    >\n        {list.map((item, index)=>{\n\n            return <div key = {index}>\n                <p\n                    style={{display: visible? \"block\": \"none\"}}\n                    key = {item}\n                    onClick = {event=>{\n                        props.addToPlan(item, props.group, list)\n                    }}\n                    >{item}\n                </p>\n\n                <p\n                    style={{display: visible? \"none\":\"block\"}}\n                    onClick = {event=>{\n                        event.preventDefault()\n                        props.removeFromFoods(item, props.group)\n\n                    }}\n                >DELETE {item}</p>\n                \n            </div>\n        })}\n        <div className = \"editFoodGroup\">\n\n            <input \n                style={{display: visible? \"none\":\"inline\"}}\n                className = \"edit\"\n                placeholder = \"Add an Item\"\n                onKeyDown = {event=>{\n                    if (event.keyCode === 13){\n                        let item = event.target.value\n                        props.addToFoods(item, props.group)\n                        event.target.value = \"\"\n\n                    }                   \n                }}\n            \n            />\n\n            \n\n            <button\n                className = \"done\"\n                onClick = {event=>{\n                    event.preventDefault()\n                    toggleVisible(prev=>!prev)\n\n                }}\n            >{done}</button>\n\n        </div>\n\n    </div>\n}\n\nexport default Items\n","import React, { useState } from 'react';\nimport Items from \"./Items\"\n\nconst ListFoodGroups = props=>{\n    const [visible, toggle] = useState( true ) \n\n    return <div>\n        <h2\n        onClick = {event=>{\n            event.preventDefault()\n            toggle(prev=>!prev)\n        }}\n        >{props.group}</h2>\n        \n        <Items \n        visible = {visible}\n        list = {props.list} // foodgroup array\n        addToPlan = {props.addToPlan}\n        group = {props.group}\n        addToFoods = {props.addToFoods}\n        removeFromFoods = {props.removeFromFoods}\n        />\n    </div>\n\n\n}\n\nexport default ListFoodGroups","const week = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n]\n\nexport default week","const Meals = [\n    \"Breakfast\",\n    \"Lunch\",\n    \"Dinner\"\n]\n\nexport default Meals","import React from \"react\";\n\nconst Plate = props =>{\n    const lists = Object.keys(props.mealPlan)\n\n\n    return <div>\n        {lists.map(list=>{\n            const index = props.weekIndex*3 + props.mealIndex\n            return<p \n            contentEditable = \"true\"\n            suppressContentEditableWarning={true}\n            key ={props.indexNum}\n            onKeyDown = {event =>{\n                if (event.keyCode === 13 ){\n                    event.preventDefault()\n                    let item = event.target.innerHTML\n                    props.updateItem (item, index, list)\n                }\n                }}\n                >{props.mealPlan.[list].[index]}</p>\n        })}\n    </div>\n}\n\nexport default Plate","import React from \"react\";\nimport mealTimes from \"./mealTimes\"\nimport Plate from \"./Plate\"\n\nconst Meals = props=>{\n    return <div className = \"day\">\n        {mealTimes.map((meal, mealIndex)=>{\n\n        return <div>    \n\n            <h3>{meal}</h3>\n            <Plate \n            mealPlan = {props.mealPlan}\n            weekIndex = {props.weekIndex}\n            mealIndex = {mealIndex}\n            updateItem = {props.updateItem}\n            />\n\n        </div>\n\n\n        })\n    }\n\n    </div>\n\n}\nexport default Meals","// itirates through each list in Data.MealPlan and renders \n// a meal plan based on user input and/or saved data.\n// There are three meals per day (breakfast, lunchc and dinner).\n// For each meal it will add one protein, one carb and one vegetable and \n// move one to the next meal. For every third meal, a new day will be \n// rendered.\n\n\n\nimport React from \"react\"\nimport week from \"./week\"\nimport Meals from \"./Meals\"\n\n\n\n\n// ensure that number tomorrow is an index \n// in week array\n\n\nconst Day = props=>{\n    let date = new Date(props.date)\n\n\n    let daynum = date.getDay()\n    if(!week[daynum]){daynum = 0}\n\n\n    const foodGroups = Object.keys(props.mealPlan)\n    const days = []\n\n    // find longest food list \n    let longest = 0\n    let longestList = \"Protein\"\n    foodGroups.forEach(list=>{\n        if (props.mealPlan.[list].length>longest){\n            longest = props.mealPlan.[list].length\n            longestList = list //list is a string\n        }\n    })\n    \n\n\n\n    props.mealPlan.[longestList].forEach((value,index)=>{\n\n\n        if (index%3 === 0){\n            daynum++ \n            if(!week[daynum]){daynum = 0}\n\n            days.push(week[daynum])\n        }\n    })\n     \n    return <div>\n        {days.map((weekDay, weekIndex)=>{\n        return <div>\n            <h2>{weekDay}</h2>  \n\n             <Meals \n            mealPlan = {props.mealPlan}\n            weekIndex = {weekIndex}\n            updateItem = {props.updateItem}\n            />\n        </div>\n    \n              \n        })}\n    </div>\n\n        \n\n   \n}\n\nexport default Day","import React, { useState } from \"react\"\nimport Day from \"./Day\"\n\n\nconst MealPlan = props=>{\n    const date = props.Data.startDate\n\n    return <div>\n        <h1>Meal Plan</h1>\n\n        <label>Select a starting date</label>\n        <input \n        id = \"date\"\n        type = \"date\"\n        onChange = {event=>{\n            let newDate = event.target.valueAsDate\n            props.changeStartDate(newDate)\n        }}\n        />\n\n        <Day \n        mealPlan = {props.Data.mealPlan}\n        updateItem = {props.updateItem}\n        date = {date}\n        />\n    </div>\n}\n\nexport default MealPlan\n","import React,{useState,useEffect} from 'react';\nimport ShopppingList from \"./components/ShoppingList\"\nimport string from \"./components/data.json\"\nimport FoodGroup from \"./components/FoodGroup\"\nimport MealPlan from \"./components/MealPlan\"\n\nconst url = \"https://floating-hamlet-55199.herokuapp.com/getFoods\"\n// const url = \"http://localhost:5000/getFoods\"\n\n\n\n\nconst App = ()=>{\n\n    // retrive Data from database\n\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [Data, setData] = useState(string);\n    \n    // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n    useEffect(() => {\n        fetch(url)\n        .then(res => res.json())\n        .then(\n            (result) => {\n            setIsLoaded(true);\n            setData(result);\n            console.log(result)\n            },\n            // Note: it's important to handle errors here\n            // instead of a catch() block so that we don't swallow\n            // exceptions from actual bugs in components.\n            (error) => {\n            setIsLoaded(true);\n            setError(error);\n            }\n        )\n    }, [])\n\n    // modify Data\n    \n\n    const addToPlan = (item, group)=>{\n        setData(prev=>{\n\n            if (group === \"Protein\"){\n                return{\n                    Foods: prev.Foods,\n                    mealPlan:{\n                        Protein: [...prev.mealPlan.Protein, item],\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n                    \n                }\n            } else if (group === \"Carb\"){\n\n                return{\n                    Foods: prev.Foods,\n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: [...prev.mealPlan.Carb, item],\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n                    \n                }\n            } else if (group === \"Veggie\"){\n\n                return{\n                    Foods: prev.Foods,\n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: [...prev.mealPlan.Veggie, item]\n                    },\n                    startDate:prev.startDate\n                    \n                }\n            }\n        })\n    }\n\n\n    const addToFoods = (item, group)=>{\n\n        setData(prev=>{\n\n            if (group === \"Protein\"){\n                return{\n                    Foods: {\n                        Protein: [...prev.Foods.[group], item],\n                        Carb: prev.Foods.Carb,\n                        Veggie: prev.Foods.Veggie\n                    },\n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n\n                }\n            } else if (group === \"Carb\"){\n\n                return{\n                    Foods: {\n                        Protein: prev.Foods.Protein,\n                        Carb: [...prev.Foods.[group], item],\n                        Veggie: prev.Foods.Veggie\n                    },\n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n                }\n            } else if (group === \"Veggie\"){\n\n                return{\n                    Foods: {\n                        Protein: prev.Foods.Protein,\n                        Carb: prev.Foods.Carb,\n                        Veggie: [...prev.Foods.[group], item]\n                    },                    \n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n                }\n            }\n        })\n\n    }\n\n    const removeFromFoods = (item, group)=>{\n\n\n        setData(prev=>{\n\n\n            if (group === \"Protein\"){\n                return{\n                    Foods: {\n                        Protein: prev.Foods.[group].filter(element => element!==item),\n                        Carb: prev.Foods.Carb,\n                        Veggie: prev.Foods.Veggie\n                    },\n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n                }\n            } else if (group === \"Carb\"){\n\n                return{\n                    Foods: {\n                        Protein: prev.Foods.Protein,\n                        Carb: prev.Foods.[group].filter(element => element!==item),\n                        Veggie: prev.Foods.Veggie\n                    },                    \n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n                }\n            } else if (group === \"Veggie\"){\n\n                return{\n                    Foods: {\n                        Protein: prev.Foods.Protein,\n                        Carb: prev.Foods.Carb,\n                        Veggie: prev.Foods.[group].filter(element => element!==item)\n                    },                    \n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n                }\n            }\n        })\n\n\n    }\n\n    const startOver = ()=>{\n        setData(prev=>{\n            return{\n                Foods: prev.Foods, \n                mealPlan:{\n                    Protein: [],\n                    Carb: [],\n                    Veggie: []\n                }  ,\n                startDate:prev.startDate             \n                \n            }\n        })\n    }\n\n    const updateItem = (item, index, group )=>{\n\n        // remove \"&nbsp;\" from item string\n        if(item.slice(-6,)=== \"&nbsp;\"){\n            console.log(item, \"item modified\")\n\n            item = item.slice(0,-6)\n        }\n\n\n        setData(prev=>{\n            const newArray = prev.mealPlan.[group].map((newItem, newIndex)=>{\n                if (newIndex === index){\n                    return item\n                }\n                return newItem\n            })\n            if (group === \"Protein\"){\n                \n\n                return{\n                    Foods: prev.Foods,\n                    mealPlan:{\n                        Protein: newArray,\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n\n                }\n            } else if (group === \"Carb\"){\n\n                return{\n                    Foods: prev.Foods,\n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: newArray,\n                        Veggie: prev.mealPlan.Veggie\n                    },\n                    startDate:prev.startDate\n                    \n                }\n            } else if (group === \"Veggie\"){\n\n                return{\n                    Foods: prev.Foods,\n                    mealPlan:{\n                        Protein: prev.mealPlan.Protein,\n                        Carb: prev.mealPlan.Carb,\n                        Veggie: newArray\n                    },\n                    startDate:prev.startDate\n                    \n                }\n            }\n        })\n    }\n    \n    const changeStartDate = date=>{\n        setData(prev=>{\n            return {\n                Foods: prev.Foods,  \n                mealPlan:prev.mealPlan,\n                startDate:date            \n            }\n\n        })\n    }\n\n    if (!Data.startDate){changeStartDate(new Date)\n    }\n\n\n\n\n    let FoodGroups = []\n    if (Data.Foods){\n        FoodGroups = Object.keys(Data.Foods)\n    }\n\n\n\n\n    // Soppinglist \n    const [hideCompleted, toggleHide] = useState(false)\n    let showAll = \"Hide Complete\"\n    if (hideCompleted){showAll = \"Show All\"}\n\n    let date = \"\"\n\n\n\n\n    return <div>\n\n        <header>\n            <a href= \"/\"> <img src=\"/images/logoyellow.svg\" alt=\"Home\" /> </a>\n            <nav>\n                <a href= \"/meal-plan\"> Meal Plan  </a>\n                <a href= \"/strength\"> Strength </a>\n                <a href= \"/cardio\"> Cardio </a>\n            </nav>\n            <div className =\"user\">\n                <a href= \"/logout\"> \n                <img src=\"https://lh3.googleusercontent.com/a/AATXAJwsRaE2gU2HRUZH_0r95dt-5dtdcaxFPnrCy1VI=s96-c\" alt=\"\" />\n                </a>\n            </div>\n\n        </header>\n\n        <div className=\"body\">\n\n            <div className = \"leftOrRightSide\">\n                <div>\n                    <h1>Foods List</h1>\n                \n                    <div className = \"lists\">\n                        {FoodGroups.map(group =>{\n                            return <FoodGroup \n                                key = {group}\n                                group = {group} \n                                list = {Data.Foods.[group]}\n                                addToPlan = {addToPlan}\n                                addToFoods = {addToFoods}\n                                removeFromFoods = {removeFromFoods}\n                                />\n                            })   \n                        }\n                    </div>\n                </div>  \n\n                <div className = \"shoppingList\">\n                    <h1>Shopping List</h1>\n\n                    <div>\n                        <div className = \"lists\">\n                            {Object.keys(Data.mealPlan).map(FoodGroup=>{\n                                return <ShopppingList \n                                hideCompleted = {hideCompleted}\n                                FoodGroup =  {FoodGroup}\n                                mealPlan = {Data.mealPlan}\n                                key = {FoodGroup}\n                                />   \n                            })}\n                        </div>\n\n                        <button \n                            className = \"edit\"\n                            onClick = {event=>{\n                                toggleHide(prev=>!prev)\n                            }}\n                            >{showAll}\n                        </button>\n                    \n                    </div>\n                </div>\n            </div>\n\n            <div className= \"leftOrRightSide\">\n\n                <MealPlan \n                Data = {Data}\n                updateItem = {updateItem}\n                changeStartDate = {changeStartDate}\n                />\n\n\n                <form action={url} method = \"post\">\n                    <input \n                    style = {{display:\"none\"}}\n                    type=\"text\" \n                    id = \"saveData\" \n                    name = \"data\" \n                    onChange = {event=>{\n                        event.preventDefault()\n                    }}\n                \n                    \n                    value = {JSON.stringify (Data)}\n                    />\n\n                    <button className = \"done\"\n                        onClick = {event=>{\n                        }}\n                    >save</button>\n\n\n\n\n                    <button className = \"edit\"\n                        onClick = {event=>{\n                            event.preventDefault()\n                            startOver()\n                        }}\n                    >Start Over</button>\n\n                </form>\n                \n                \n\n\n                \n\n            </div>\n\n\n        </div>\n        \n\n    </div>\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}